#include <GL/glut.h>
#include <cstdlib>
// Ball parameters
float ballRadius = 0.5f;
float ballX = 0.0f;
float ballY = 0.0f;
float ballZ = 0.0f;
// Animation parameters
float animationSpeed = 0.01f;
float animationDirection = 1.0f;
// Rotation parameters
float rotationAngle = 0.0f;
float rotationSpeed = 0.5f;
// Scaling parameters
float scaleAmount = 1.0f;
float scaleSpeed = 0.01f;
float scaleDirection = 1.0f;
// Color parameters
float colorR = 1.0f;
float colorG = 0.0f;
float colorB = 0.0f;
// Menu variables
int colorMenuId; // Menu ID for color submenu
int currentColor; // Variable to store the current color option
void display() {
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
// Translate the ball to its current position
glTranslatef(ballX, ballY, ballZ);
// Rotate the ball around its y-axis
glRotatef(rotationAngle, 0.0f, 1.0f, 0.0f);
// Scale the ball
glScalef(scaleAmount, scaleAmount, scaleAmount);
// Set the ball color
glColor3f(colorR, colorG, colorB);
// Draw the ball
glutSolidSphere(ballRadius, 20, 20);
glutSwapBuffers();
}
void update(int value) {
// Update the position of the ball
ballY += animationSpeed * animationDirection;
// Reverse the animation direction if the ball reaches the top or bottom boundary
if (ballY + ballRadius > 1.0f || ballY - ballRadius < -1.0f) {
animationDirection *= -1;
}
// Update the rotation angle
rotationAngle += rotationSpeed;
// Update the scale amount
scaleAmount += scaleSpeed * scaleDirection;
// Reverse the scale direction if the ball reaches the maximum or minimum size
if (scaleAmount > 1.5f || scaleAmount < 0.5f) {
scaleDirection *= -1;
}
// Redraw the scene
glutPostRedisplay();
// Set the next update callback
glutTimerFunc(16, update, 0);
}
void colorMenuHandler(int option) {
currentColor = option;
switch (currentColor) {
case 1: // Red
colorR = 1.0f;
colorG = 0.0f;
colorB = 0.0f;
break;
case 2: // Green
colorR = 0.0f;
colorG = 1.0f;
colorB = 0.0f;
break;
case 3: // Blue
colorR = 0.0f;
colorG = 0.0f;
colorB = 1.0f;
break;
case 4: // Random
colorR = static_cast<float>(rand()) / RAND_MAX;
colorG = static_cast<float>(rand()) / RAND_MAX;
colorB = static_cast<float>(rand()) / RAND_MAX;
break;
}
glutPostRedisplay(); // Redraw the scene
}
int main(int argc, char** argv) {
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
glutInitWindowSize(800, 600);
glutCreateWindow("Floating Ball");
glEnable(GL_DEPTH_TEST);
glutDisplayFunc(display);
// Create color submenu
colorMenuId = glutCreateMenu(colorMenuHandler);
glutAddMenuEntry("Red", 1);
glutAddMenuEntry("Green", 2);
glutAddMenuEntry("Blue", 3);
glutAddMenuEntry("Random", 4);
// Create main menu
int mainMenuId = glutCreateMenu(colorMenuHandler);
glutAddSubMenu("Change Color", colorMenuId);
// Attach the main menu to the right mouse button
glutAttachMenu(GLUT_RIGHT_BUTTON);
// Set the initial update callback
glutTimerFunc(0, update, 0);
glutMainLoop();
return 0;
}
